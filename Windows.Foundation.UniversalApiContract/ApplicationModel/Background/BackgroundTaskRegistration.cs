// Decompiled with JetBrains decompiler
// Type: Windows.ApplicationModel.Background.BackgroundTaskRegistration
// Assembly: Windows.Foundation.UniversalApiContract, Version=14.0.0.0, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime
// MVID: F62EFE2D-E4C7-4EB8-B17A-E7D33D1BB49F
// Assembly location: C:\Users\codyc\.nuget\packages\microsoft.windows.sdk.contracts\10.0.22000.196\ref\netstandard2.0\Windows.Foundation.UniversalApiContract.winmd

using System;
using System.Runtime.CompilerServices;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.Foundation.Metadata;

namespace Windows.ApplicationModel.Background
{
  /// <summary>Represents a background task that has been registered with the system.</summary>
  [Static(typeof (IBackgroundTaskRegistrationStatics), 65536, "Windows.Foundation.UniversalApiContract")]
  [Static(typeof (IBackgroundTaskRegistrationStatics2), 262144, "Windows.Foundation.UniversalApiContract")]
  [MarshalingBehavior(MarshalingType.Agile)]
  [Threading(ThreadingModel.Both)]
  [ContractVersion(typeof (UniversalApiContract), 65536)]
  public sealed class BackgroundTaskRegistration : 
    IBackgroundTaskRegistration,
    IBackgroundTaskRegistration2,
    IBackgroundTaskRegistration3
  {
    /// <summary>Gets the identifier of a registered background task.</summary>
    /// <returns>The unique identifier for the task. This identifier is generated by the system when the task is registered.</returns>
    public extern Guid TaskId { [MethodImpl] get; }

    /// <summary>Gets the name of a registered background task.</summary>
    /// <returns>The description specified with BackgroundTaskBuilder.Name when the task was created.</returns>
    public extern string Name { [MethodImpl] get; }

    /// <summary>Attaches a progress event handler to the registered background task.</summary>
    public extern event BackgroundTaskProgressEventHandler Progress;

    /// <summary>Attaches a completed event handler to the registered background task.</summary>
    public extern event BackgroundTaskCompletedEventHandler Completed;

    /// <summary>Cancels the registration of a registered background task.</summary>
    /// <param name="cancelTask">True if currently running instances of this background task should be canceled. If this parameter is false, currently running instances are allowed to finish. Canceled instances receive a Canceled event with a cancellation reason of **Abort**.</param>
    [MethodImpl]
    public extern void Unregister(bool cancelTask);

    /// <summary>This is not intended for use in your code. For all unsupported trigger types, the value returned by this property is null.</summary>
    /// <returns>This is not intended for use in your code. For all unsupported trigger types, the value returned by this property is null.</returns>
    public extern IBackgroundTrigger Trigger { [MethodImpl] get; }

    /// <summary>Gets the **BackgroundTaskRegistrationGroup** that this **BackgroundTaskRegistration** is a part of.</summary>
    /// <returns>The **BackgroundTaskRegistrationGroup** that this **BackgroundTaskRegistration** is a part of.</returns>
    public extern BackgroundTaskRegistrationGroup TaskGroup { [MethodImpl] get; }

    /// <summary>Gets the background task groups.</summary>
    /// <returns>A dictionary of background task groups.</returns>
    public static extern IMapView<string, BackgroundTaskRegistrationGroup> AllTaskGroups { [MethodImpl] get; }

    /// <summary>Gets the task group object that is associated with the group identifier.</summary>
    /// <param name="groupId">The group identifier.</param>
    /// <returns>The task group object that is associated with the group identifier.</returns>
    [MethodImpl]
    public static extern BackgroundTaskRegistrationGroup GetTaskGroup(
      string groupId);

    /// <summary>Enumerates an application's registered background tasks, except for the background tasks registered in a group with Windows.ApplicationModel.Background.BackgroundTaskBuilder.TaskGroup.</summary>
    /// <returns>A view into a map of registered background tasks consisting of the task ID and an IBackgroundTaskRegistration interface.</returns>
    public static extern IMapView<Guid, IBackgroundTaskRegistration> AllTasks { [MethodImpl] get; }
  }
}
