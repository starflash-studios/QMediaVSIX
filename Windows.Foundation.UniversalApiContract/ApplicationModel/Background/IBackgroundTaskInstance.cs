// Decompiled with JetBrains decompiler
// Type: Windows.ApplicationModel.Background.IBackgroundTaskInstance
// Assembly: Windows.Foundation.UniversalApiContract, Version=14.0.0.0, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime
// MVID: F62EFE2D-E4C7-4EB8-B17A-E7D33D1BB49F
// Assembly location: C:\Users\codyc\.nuget\packages\microsoft.windows.sdk.contracts\10.0.22000.196\ref\netstandard2.0\Windows.Foundation.UniversalApiContract.winmd

using System;
using Windows.Foundation;
using Windows.Foundation.Metadata;

namespace Windows.ApplicationModel.Background
{
  /// <summary>Provides access to a background task instance.</summary>
  [ContractVersion(typeof (UniversalApiContract), 65536)]
  [Guid(2254166650, 8664, 17779, 143, 50, 146, 138, 27, 6, 65, 246)]
  public interface IBackgroundTaskInstance
  {
    /// <summary>Gets the instance ID of the background task instance.</summary>
    /// <returns>A unique identifier for the background task instance. This identifier is generated by the system when the instance is created.</returns>
    Guid InstanceId { get; }

    /// <summary>Gets access to the registered background task for this background task instance.</summary>
    /// <returns>An interface that provides access to the registered background task.</returns>
    BackgroundTaskRegistration Task { get; }

    /// <summary>Gets or sets progress status for a background task instance.</summary>
    /// <returns>A value defined by the application to indicate the task's progress.</returns>
    uint Progress { get; set; }

    /// <summary>Gets additional information associated with a background task instance.</summary>
    /// <returns>Represents additional information for the background task. If the background task is triggered by a mobile network operator notification, this property is an instance of a NetworkOperatorNotificationEventDetails class. If the background task is triggered by a system event or time event, this property is not used.</returns>
    object TriggerDetails { get; }

    /// <summary>Attaches a cancellation event handler to the background task instance.</summary>
    event BackgroundTaskCanceledEventHandler Canceled;

    /// <summary>Gets the number of times resource management policy caused the background task to be suspended.</summary>
    /// <returns>The number of times the background task has been suspended.</returns>
    uint SuspendedCount { get; }

    /// <summary>Informs the system that the background task might continue to perform work after the IBackgroundTask.Run method returns.</summary>
    /// <returns>A background task deferral.</returns>
    BackgroundTaskDeferral GetDeferral();
  }
}
