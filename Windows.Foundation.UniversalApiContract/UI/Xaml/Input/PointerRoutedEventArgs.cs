// Decompiled with JetBrains decompiler
// Type: Windows.UI.Xaml.Input.PointerRoutedEventArgs
// Assembly: Windows.Foundation.UniversalApiContract, Version=14.0.0.0, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime
// MVID: F62EFE2D-E4C7-4EB8-B17A-E7D33D1BB49F
// Assembly location: C:\Users\codyc\.nuget\packages\microsoft.windows.sdk.contracts\10.0.22000.196\ref\netstandard2.0\Windows.Foundation.UniversalApiContract.winmd

using System.Runtime.CompilerServices;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.Foundation.Metadata;
using Windows.System;
using Windows.UI.Input;

namespace Windows.UI.Xaml.Input
{
  /// <summary>Contains the arguments returned by the last pointer event message.</summary>
  [Threading(ThreadingModel.Both)]
  [WebHostHidden]
  [ContractVersion(typeof (UniversalApiContract), 65536)]
  [MarshalingBehavior(MarshalingType.Agile)]
  public sealed class PointerRoutedEventArgs : 
    RoutedEventArgs,
    IPointerRoutedEventArgs,
    IPointerRoutedEventArgs2
  {
    /// <summary>Gets a reference to a pointer token.</summary>
    /// <returns>A pointer token.</returns>
    public extern Pointer Pointer { [MethodImpl] get; }

    /// <summary>Gets a value that indicates which key modifiers were active at the time that the pointer event was initiated.</summary>
    /// <returns>A value or values of the enumeration.</returns>
    public extern VirtualKeyModifiers KeyModifiers { [MethodImpl] get; }

    /// <summary>Gets or sets a value that marks the routed event as handled, and prevents most handlers along the event route from handling the same event again.</summary>
    /// <returns>**true** to mark the routed event handled. **false** to leave the routed event unhandled, which permits the event to potentially route further and be acted on by other handlers. The default is **false**.</returns>
    public extern bool Handled { [MethodImpl] get; [MethodImpl] set; }

    /// <summary>Retrieves a PointerPoint object that provides basic info on the pointer associated with the event.</summary>
    /// <param name="relativeTo">Any UIElement -derived object that is connected to the same object tree. To specify the object relative to the overall coordinate system, use a *relativeTo*  value of **null**.</param>
    /// <returns>A PointerPoint value that represents the pointer point associated with this event. If **null** was passed as *relativeTo*, the coordinates are in the frame of reference of the overall window. If a *relativeTo* value other than **null** was passed, the coordinates are relative to the object referenced by *relativeTo*.</returns>
    [MethodImpl]
    public extern PointerPoint GetCurrentPoint(UIElement relativeTo);

    /// <summary>Retrieves a collection of PointerPoint objects that represent the pointer history from the last pointer event up to and including the current pointer event. Each PointerPoint in the collection provides basic info on the pointer associated with the event.The last item in the collection is equivalent to the PointerPoint object returned by GetCurrentPoint.</summary>
    /// <param name="relativeTo">Provides the context for the pointer data. Can be any UIElement -derived object that is connected to the same object tree. If **null**, location coordinates are in the context of the app.</param>
    /// <returns>The collection of PointerPoint objects corresponding to the pointer history associated with the event. If *relativeTo* is **null**, location coordinates are in the context of the app. Otherwise, the coordinates are relative to the object referenced by *relativeTo*.</returns>
    [MethodImpl]
    public extern IVector<PointerPoint> GetIntermediatePoints(
      UIElement relativeTo);

    /// <summary>Gets a value that indicates whether the pointer event occurred from direct interaction with an object by the user, or was generated by the platform based on changes to the UI of the application.</summary>
    /// <returns>True if the event was generated by the platform; otherwise, false.</returns>
    public extern bool IsGenerated { [MethodImpl] get; }
  }
}
