// Decompiled with JetBrains decompiler
// Type: Windows.Media.SpeechSynthesis.SpeechSynthesisStream
// Assembly: Windows.Foundation.UniversalApiContract, Version=14.0.0.0, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime
// MVID: F62EFE2D-E4C7-4EB8-B17A-E7D33D1BB49F
// Assembly location: C:\Users\codyc\.nuget\packages\microsoft.windows.sdk.contracts\10.0.22000.196\ref\netstandard2.0\Windows.Foundation.UniversalApiContract.winmd

using System.Runtime.CompilerServices;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.Foundation.Metadata;
using Windows.Media.Core;
using Windows.Storage.Streams;

namespace Windows.Media.SpeechSynthesis
{
  /// <summary>Supports reading and writing audio data generated by the speech synthesis engine (voice) to/from a random access stream.</summary>
  [ContractVersion(typeof (UniversalApiContract), 65536)]
  [MarshalingBehavior(MarshalingType.Agile)]
  [DualApiPartition(version = 167772160)]
  public sealed class SpeechSynthesisStream : 
    ISpeechSynthesisStream,
    IRandomAccessStreamWithContentType,
    IContentTypeProvider,
    IRandomAccessStream,
    IOutputStream,
    IClosable,
    IInputStream,
    ITimedMetadataTrackProvider
  {
    /// <summary>Gets the collection of timeline markers associated with the SpeechSynthesisStream.</summary>
    /// <returns>When this method completes successfully, it returns a collection of IMediaMarker objects that represent the timeline markers in the stream.</returns>
    public extern IVectorView<IMediaMarker> Markers { [MethodImpl] get; }

    /// <summary>Gets or sets the size of the SpeechSynthesisStream.</summary>
    /// <returns>The size of the stream.</returns>
    public extern ulong Size { [MethodImpl] get; [MethodImpl] set; }

    /// <summary>Retrieves an input stream at a specified location in SpeechSynthesisStream.</summary>
    /// <param name="position">The location in the stream at which to begin.</param>
    /// <returns>The input stream.</returns>
    [MethodImpl]
    public extern IInputStream GetInputStreamAt(ulong position);

    /// <summary>Retrieves an output stream at a specified location in SpeechSynthesisStream.</summary>
    /// <param name="position">The location in the stream at which to begin.</param>
    /// <returns>The output stream.</returns>
    [MethodImpl]
    public extern IOutputStream GetOutputStreamAt(ulong position);

    /// <summary>Gets the current position within the SpeechSynthesisStream.</summary>
    /// <returns>The current position within the stream.</returns>
    public extern ulong Position { [MethodImpl] get; }

    /// <summary>Goes to the specified position within SpeechSynthesisStream.</summary>
    /// <param name="position">The desired position within the stream.</param>
    [MethodImpl]
    public extern void Seek(ulong position);

    /// <summary>Creates a copy of SpeechSynthesisStream that references the same bytes as the original stream.</summary>
    /// <returns>The new stream.</returns>
    [MethodImpl]
    public extern IRandomAccessStream CloneStream();

    /// <summary>Gets whether SpeechSynthesisStream can be read from.</summary>
    /// <returns>True if the stream can be read from; otherwise false.</returns>
    public extern bool CanRead { [MethodImpl] get; }

    /// <summary>Gets a value that indicates whether SpeechSynthesisStream can be written to.</summary>
    /// <returns>True if the stream can be written to; otherwise false.</returns>
    public extern bool CanWrite { [MethodImpl] get; }

    [MethodImpl]
    public extern void Close();

    /// <summary>Reads data asynchronously in a sequential stream.</summary>
    /// <param name="buffer">The buffer into which the asynchronous read operation places the bytes that are read.</param>
    /// <param name="count">The number of bytes to read that is less than or equal to the Capacity value.</param>
    /// <param name="options">Specifies the type of the asynchronous read operation.</param>
    /// <returns>An asynchronous operation that includes progress updates. For more information, see ReadAsync method.</returns>
    [MethodImpl]
    public extern IAsyncOperationWithProgress<IBuffer, uint> ReadAsync(
      IBuffer buffer,
      uint count,
      InputStreamOptions options);

    /// <summary>Writes data asynchronously in a sequential stream.</summary>
    /// <param name="buffer">The buffer into which the asynchronous writer operation places the bytes to write.</param>
    /// <returns>An asynchronous operation that includes progress updates. For more information, see WriteAsync method.</returns>
    [MethodImpl]
    public extern IAsyncOperationWithProgress<uint, uint> WriteAsync(
      IBuffer buffer);

    /// <summary>Flushes data asynchronously in a sequential stream.</summary>
    /// <returns>An asynchronous operation. For more information, see FlushAsync method.</returns>
    [MethodImpl]
    public extern IAsyncOperation<bool> FlushAsync();

    /// <summary>Gets the MIME type of the content of SpeechSynthesisStream.</summary>
    /// <returns>The MIME type (audio/wav) of the stream.</returns>
    public extern string ContentType { [MethodImpl] get; }

    /// <summary>Gets the collection of optional word and sentence boundaries in the speech synthesis stream as specified by the SpeechSynthesizer.Options property.</summary>
    /// <returns>A collection of TimedMetadataTrack objects.</returns>
    public extern IVectorView<TimedMetadataTrack> TimedMetadataTracks { [MethodImpl] get; }
  }
}
