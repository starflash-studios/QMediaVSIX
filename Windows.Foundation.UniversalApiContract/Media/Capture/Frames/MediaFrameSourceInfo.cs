// Decompiled with JetBrains decompiler
// Type: Windows.Media.Capture.Frames.MediaFrameSourceInfo
// Assembly: Windows.Foundation.UniversalApiContract, Version=14.0.0.0, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime
// MVID: F62EFE2D-E4C7-4EB8-B17A-E7D33D1BB49F
// Assembly location: C:\Users\codyc\.nuget\packages\microsoft.windows.sdk.contracts\10.0.22000.196\ref\netstandard2.0\Windows.Foundation.UniversalApiContract.winmd

using System;
using System.Runtime.CompilerServices;
using Windows.Devices.Enumeration;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.Foundation.Metadata;
using Windows.Perception.Spatial;
using Windows.UI.WindowManagement;

namespace Windows.Media.Capture.Frames
{
  /// <summary>Provides information about a MediaFrameSource.</summary>
  [ContractVersion(typeof (UniversalApiContract), 196608)]
  [Threading(ThreadingModel.Both)]
  [DualApiPartition(version = 167772162)]
  [MarshalingBehavior(MarshalingType.Agile)]
  public sealed class MediaFrameSourceInfo : 
    IMediaFrameSourceInfo,
    IMediaFrameSourceInfo2,
    IMediaFrameSourceInfo3
  {
    /// <summary>Gets the unique identifier for a MediaFrameSource. Use this identifier as the key when getting a **MediaFrameSource** instance from MediaCapture.FrameSources dictionary.</summary>
    /// <returns>The unique identifier for a media frame source.</returns>
    public extern string Id { [MethodImpl] get; }

    /// <summary>Gets a value indicating the stream type of a MediaFrameSource, such as photo, video, or audio.</summary>
    /// <returns>A value indicating the stream type of a media frame source.</returns>
    public extern MediaStreamType MediaStreamType { [MethodImpl] get; }

    /// <summary>Gets a value indicating the kind of media frames generated by a MediaFrameSource, such as color, depth, or infrared.</summary>
    /// <returns>A value indicating the kind of media frames generated by a media frame source.</returns>
    public extern MediaFrameSourceKind SourceKind { [MethodImpl] get; }

    /// <summary>Gets the MediaFrameSourceGroup to which a MediaFrameSource belongs.</summary>
    /// <returns>The group to which a media frame source belongs.</returns>
    public extern MediaFrameSourceGroup SourceGroup { [MethodImpl] get; }

    /// <summary>Gets a DeviceInformation object that can be used to access properties of a MediaFrameSource device.</summary>
    /// <returns>A DeviceInformation object representing a media frame source.</returns>
    public extern DeviceInformation DeviceInformation { [MethodImpl] get; }

    /// <summary>Gets a read-only map of properties for a MediaFrameSource.</summary>
    /// <returns>A read-only map of properties for a media frame source.</returns>
    public extern IMapView<Guid, object> Properties { [MethodImpl] get; }

    /// <summary>Gets an object representing the spatial coordinate system in which the data from a MediaFrameSource is expressed.</summary>
    /// <returns>An object representing the spatial coordinate system of the media frame source.</returns>
    public extern SpatialCoordinateSystem CoordinateSystem { [MethodImpl] get; }

    /// <summary>Gets the unique identifier of the MediaCaptureVideoProfile associated with the MediaFrameSourceInfo.</summary>
    /// <returns>The unique identifier of the **MediaCaptureVideoProfile** associated with the MediaFrameSourceInfo.</returns>
    public extern string ProfileId { [MethodImpl] get; }

    /// <summary>Gets a read-only list of MediaCaptureVideoProfileMediaDescription objects which specify a group of capture settings that are supported by a video profile.</summary>
    /// <returns>A read-only list of MediaCaptureVideoProfileMediaDescription objects.</returns>
    public extern IVectorView<MediaCaptureVideoProfileMediaDescription> VideoProfileMediaDescription { [MethodImpl] get; }

    /// <summary>Gets the relative panel location of the provided DisplayRegion when using the associated MediaFrameSource.</summary>
    /// <param name="displayRegion">The **DisplayRegion** for which the relative panel location is retrieved.</param>
    /// <returns>A member of the Panel enumeration indicating relative panel location of the provided **DisplayRegion**.</returns>
    [MethodImpl]
    public extern Panel GetRelativePanel(DisplayRegion displayRegion);
  }
}
